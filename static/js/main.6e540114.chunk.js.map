{"version":3,"sources":["Cmps/Common/Modal/Modal.module.css","Cmps/Header/Header.module.css","Cmps/Content/Content.module.css","serviceWorker.ts","store/store.ts","store/auto-store.ts","Cmps/Header/Header.tsx","Cmps/Content/task/Task.tsx","Cmps/Common/Modal/Modal.tsx","Cmps/Content/Content.tsx","index.tsx","Cmps/Content/task/Task.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Store","fieldText","tasks","updateFieldText","text","createTask","unshift","id","Math","random","toString","substr","name","spentTime","lastStartTime","round","Date","getTime","startTask","i","length","stopTask","task","deleteTask","filter","this","load","store","save","firstRun","mobx","json","JSON","stringify","autoSave","bind","savedStore","localStorage","getItem","data","parse","extendObservable","setItem","decorate","observable","action","storeInstance","Header","observer","className","style","header","inp","value","onChange","event","target","btn","onClick","icon","faPlus","Task","interval","setInterval","props","forceUpdate","clearInterval","remove","stop","start","timeAndBtns","time","delta","days","floor","hours","minutes","seconds","showTime","faStop","faPlay","faTrash","React","Component","Modal","answer","modBack","modal","faCheck","faTimes","Content","state","showModal","removeID","setState","removeConfirmedByModal","yesOrNo","content","map","key","App","document","title","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6e540114.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Modal_btn__bKKtw\",\"modal\":\"Modal_modal__1UQln\",\"modBack\":\"Modal_modBack__3lweq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3NlgG\",\"inp\":\"Header_inp__18Rgt\",\"btn\":\"Header_btn__3vPiX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3mCMQ\"};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { decorate, observable, action, extendObservable } from 'mobx'\nimport autoSave from './auto-store'\n\nexport interface TaskI {\n    id: string\n    name: string\n    spentTime: number\n    lastStartTime: number\n}\n\nclass Store {\n    fieldText : string = ''\n    tasks : TaskI[] = []\n\n    constructor() {\n        this.load()\n        autoSave(this, this.save.bind(this));\n    }\n\n    load() {\n        let savedStore = localStorage.getItem('store')\n        if (typeof savedStore ==='string') {\n            let data = JSON.parse(savedStore)\n            extendObservable(this, data)\n        }\n    }\n\n    save(json: string) {\n        localStorage.setItem('store', json)\n    }\n\n    updateFieldText = (text: string)=> {\n        this.fieldText = text\n    }\n\n    createTask = () => {\n        this.tasks.unshift({\n            id: Math.random().toString(36).substr(2, 9),\n            name: this.fieldText,\n            spentTime: 0,\n            lastStartTime: Math.round(new Date().getTime() / 1000)\n        })\n        this.fieldText = ''\n    }\n\n    startTask = (id : string) =>  {\n        let tasks = this.tasks\n        for(let i=0; i<tasks.length; i++) {\n            if (tasks[i].id === id) {\n                tasks[i].lastStartTime = Math.round(new Date().getTime() / 1000)\n                break\n            }\n        }\n    }\n\n    stopTask = (id : string) => {\n        let tasks = this.tasks\n        for(let i=0; i<tasks.length; i++) {\n            if (tasks[i].id === id) {\n                let task = tasks[i]\n                if (task.lastStartTime!==0) {\n                    task.spentTime += Math.round(new Date().getTime() / 1000) - +task.lastStartTime\n                    task.lastStartTime = 0\n                }\n                break\n            }\n        }\n    }\n\n    deleteTask = (id : string) =>  {\n        this.tasks = this.tasks.filter(task=>task.id!==id)\n    }\n}\n\ndecorate(Store, {\n    fieldText: observable,\n    tasks: observable,\n    updateFieldText: action,\n    createTask: action,\n    startTask: action,\n    stopTask: action,\n    deleteTask: action\n})\n\nconst storeInstance = new Store()\n\nexport type storeType = typeof storeInstance\n\nexport default storeInstance","import * as mobx from \"mobx\"\n\nexport default function autoSave(store: any, save: Function) {\n    let firstRun = true;\n    mobx.autorun(() => {\n        const json = JSON.stringify(mobx.toJS(store));\n        if (!firstRun) {\n            save(json);\n        }\n        firstRun = false;\n    });\n}","import React from \"react\";\nimport style from './Header.module.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\nimport {observer} from \"mobx-react\"\nimport {PropsWithStoreType} from '../../index'\n\n\nconst Header : React.FC<PropsWithStoreType> = observer(({store})=>{\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        store.updateFieldText(event.target.value);\n    }\n\n    return <nav className={style.header}>\n        <input className={style.inp} value={store.fieldText} onChange={handleChange}/>\n        <button className={style.btn+' customBtn'} onClick={()=>{store.createTask()}}><FontAwesomeIcon icon={faPlus}/></button>\n    </nav>\n})\n\nexport default Header;","import React from \"react\";\nimport style from './Task.module.css'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'\nimport { faPlay } from '@fortawesome/free-solid-svg-icons'\nimport { faStop } from '@fortawesome/free-solid-svg-icons'\nimport {observer} from \"mobx-react\";\nimport {TaskI} from \"../../../store/store\";\n\ntype PropsType = {\n    task: TaskI\n    remove: (id: string)=>void\n    stop: (id: string)=>void\n    start: (id: string)=>void\n}\n\n@observer\nclass Task extends React.Component<PropsType, {}> {\n    interval: any\n\n    componentDidMount() {\n       this.interval = setInterval(()=>{if(this.props.task.lastStartTime!==0)this.forceUpdate()}, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval)\n    }\n\n    render() {\n        let {task, remove, stop, start} = this.props\n\n        const showTime = () => {\n            let delta = task.spentTime\n            if (task.lastStartTime)\n                delta += Math.round((new Date).getTime() / 1000) - task.lastStartTime\n            let days = Math.floor(delta / 86400);\n            delta -= days * 86400;\n            let hours = Math.floor(delta / 3600) % 24;\n            delta -= hours * 3600;\n            let minutes = Math.floor(delta / 60) % 60;\n            delta -= minutes * 60;\n            let seconds = delta % 60;\n\n            return `${days} day ${hours}:${minutes}:${seconds}`\n        }\n\n        return <div className={style.task}>\n            <div>\n                <span className={style.name}>{task.name ? task.name : '-'}</span>\n            </div>\n            <div className={style.timeAndBtns}>\n                <span className={style.time}>{showTime()}</span>\n                {task.lastStartTime>0\n                    ? <button className={`customBtn ${style.btn}`} onClick={() => {stop(task.id)}}><FontAwesomeIcon icon={faStop}/></button>\n                    : <button className={`customBtn ${style.btn}`} onClick={() => {start(task.id)}}><FontAwesomeIcon icon={faPlay}/></button>\n                }\n                <button className={`customBtn ${style.btn}`} onClick={() => {remove(task.id)}}><FontAwesomeIcon icon={faTrash}/></button>\n            </div>\n        </div>\n    }\n}\n\nexport default Task","import React from \"react\"\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheck } from '@fortawesome/free-solid-svg-icons'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport style from \"./Modal.module.css\";\n\ntype PropsType = {\n    answer: (b: boolean)=>void\n}\n\nconst Modal : React.FC<PropsType>  =  ({answer})=>{\n    return <div className={style.modBack}>\n        <div className={style.modal}>\n            Are you sure ?\n            <button className={`customBtn ${style.btn}`} onClick={()=>{answer(true)}}><FontAwesomeIcon icon={faCheck} /></button>\n            <button className={`customBtn ${style.btn}`} onClick={()=>{answer(false)}}><FontAwesomeIcon icon={faTimes} /></button>\n        </div>\n    </div>\n}\n\nexport default Modal","import React, {useContext} from \"react\";\nimport style from './Content.module.css'\nimport Task from \"./task/Task\";\nimport Modal from \"../Common/Modal/Modal\";\nimport {observer} from \"mobx-react\";\nimport {PropsWithStoreType} from \"../../index\";\n\ntype StateType = {\n    showModal: boolean\n    removeID: string\n}\n\n@observer\nclass Content extends React.Component<PropsWithStoreType, StateType> {\n    store = this.props.store\n\n    state = {\n        showModal: false,\n        removeID: ''\n    }\n\n    remove = (id: string) => {\n        this.setState({\n            showModal: true,\n            removeID: id\n        })\n    }\n\n    removeConfirmedByModal = (yesOrNo: boolean)=> {\n        this.setState({showModal: false})\n        if (yesOrNo) this.store.deleteTask(this.state.removeID)\n    }\n\n    render() {\n        return <div className={style.content}>\n            {this.store.tasks.map((task)=><Task key={task.id} task={task} start={this.store.startTask} stop={this.store.stopTask} remove={this.remove} /> )}\n            {this.state.showModal && <Modal answer={this.removeConfirmedByModal}/>}\n        </div>\n    }\n}\n\nexport default Content","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\nimport storeInstance from './store/store'\nimport Header from \"./Cmps/Header/Header\"\nimport Content from \"./Cmps/Content/Content\"\nimport {storeType} from './store/store'\n\nexport type PropsWithStoreType = {\n    store: storeType\n}\n\nconst App  : React.FC<PropsWithStoreType> = ({store}) =>  {\n    document.title = 'Todo list App'\n    return (\n        <div className=\"App\">\n            <Header store={store}/>\n            <Content store={store}/>\n        </div>\n    );\n}\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App store={storeInstance}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"task\":\"Task_task__2gY3E\",\"name\":\"Task_name__1TFOq\",\"timeAndBtns\":\"Task_timeAndBtns__1CjOj\",\"time\":\"Task_time__1uBZu\",\"btn\":\"Task_btn__2tgG7\"};"],"sourceRoot":""}